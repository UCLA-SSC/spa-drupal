<?php

/**
 * @file
 * Common library for iCal functionality.
 *
 * Much of the functionality provided by this module is provided by the iCalcreator
 * PHP library.
 *
 * @link http://www.kigkonsult.se/iCalcreator/index.php
 */

define('DATE_DEBUG_FORMAT', 'l Y-m-d H:i:sP e');

define('DATE_DATETIME_FORMAT', 'Y-m-d\TH:i:s');


/**
 * Implementation of hook_autoload_info().
 */
function ical_autoload_info() {
  // These classes are part of iCalCreator.
  $file_info = array(
    'file' => 'iCalcreator.class.php',
    'file path' => libraries_get_path('iCalcreator'),
  );

  $return = array(
    'vcalendar' => $file_info,
    'vevent' => $file_info,
    'valarm' => $file_info,
    'vfreebusy' => $file_info,
    'vjournal' => $file_info,
    'vtimezone' => $file_info,
    'vtodo' => $file_info,
  );

  // These classes are part of our module.
  $file_info = array('file' => 'ical.wrappers.inc');
  $return += array(
    'DrupalVEvent' => $file_info,
    'DrupalVEventIteratorRange' => $file_info,
    'DrupalVEventIteratorCount' => $file_info,
    'vevent_fixed' => $file_info,
  );

  return $return;
}


/**
 * Implementation of hook_menu().
 */
function ical_menu() {
  $items['ical-test'] = array(
    'title' => 'iCal test',
    'page callback' => 'ical_test',
    'access arguments' => array('access content'),
  );

  $items['ical/date/%node/%'] = array(
    'title' => 'iCal formatter',
    'page callback' => 'ical_date_ical_callback',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function ical_theme() {
  return array(
    'ical_formatter_date_ical' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

function ical_test() {

/*
  $event = new DrupalVEvent(new vevent());

  $start = new DateTime('2010-05-04 14:00:00', new DateTimezone('America/Chicago'));
  $end = new DateTime('2010-05-04 16:00:00', new DateTimezone('America/Chicago'));
  $event->setStart($start);
  $event->setEnd($end);

  $event->setRrule(array(
    'FREQ' => 'YEARLY',
    'INTERVAL' => 2,
    'BYMONTH' => '2,3',
  ));

  $event->setExrule(array(
    'FREQ' => 'YEARLY',
    'INTERVAL' => 2,
    'BYMONTH' => 3,
  ));

  $exdate = new DateTime('2014-01-01 13:00:00', new DateTimezone('America/Chicago'));
  $event->addExdate($exdate);
  $rdate = new DateTime('2014-03-01 13:00:00', new DateTimezone('America/Chicago'));
  $event->addRdate($rdate);

  //dpm('Testing range');

  $range_end = new DateTime('2020-05-01 14:00:00', new DateTimezone('America/Chicago'));
  $iterator = $event->getIteratorRange($start, $range_end);
  dpm("Count: ". count($iterator));
  foreach ($iterator as $x) {
    dpm($x->format('Y-m-d H:i:sP e'));
  }



  dpm('Testing count');
  $iterator = $event->getIteratorCount(3, $start, $range_end);
  dpm("Count: ". count($iterator));
  foreach ($iterator as $x) {
    dpm($x->format('Y-m-d H:i:sP e'));
  }
*/

  /*
  $vcalendar = vcalendar_create();
  $vcalendar->addComponent($event);
  dpm($vcalendar->createCalendar());
  */

/*
  // Confirm that we don't get duplicates, and we can parse an ical string.
  $string = "
BEGIN:VEVENT
UID:20100622T183013CEST-49239cBvsj@127.0.0.1
DTSTAMP:20100602T000000Z
DTSTART;TZID=America/Chicago:20100602T000000
DTEND;TZID=America/Chicago:20100602T010000
RRULE;TZID=America/Chicago:FREQ=DAILY;COUNT=3
STATUS:CANCELED
END:VEVENT";
  $event = DrupalVEvent::create($string);
  $start = $event->getStart();

  $iterator = $event->getIteratorCount(5, $start, NULL);
  foreach ($iterator as $x) {
    dpm($x->format(DATE_DEBUG_FORMAT));
  }
  */

/*
  $string = <<<VEVENT
BEGIN:VEVENT
UID:25516ac2-da63-102d-8775-001e4f103178@balboa.garfield.vash.palantir.net
DTSTAMP:20100701T184500Z
DTSTART;TZID=America/Chicago:20100701T184500
DTEND;TZID=America/Chicago:20100801T194500
RRULE;TZID=America/Chicago:FREQ=WEEKLY;UNTIL=20100826;INTERVAL=1;WKS T=SU;B
 YDAY=END:VEVENT
SUMMARY:test event
END:VEVENT
VEVENT;

  $event = DrupalVEvent::create($string);
  $start = $event->getStart();

  $iterator = $event->getIteratorRange();
  foreach ($iterator as $x) {
    dpm($x->format(DATE_DEBUG_FORMAT));
  }
  */


  /*
  $zone = "America/Chicago"; // Good (GMT-5)
  //$zone = "America/Los_Angeles"; // Bad (GMT-7)
  //$zone = "America/Tijuana"; // Bad (GMT-7)
  //$zone = "America/Mexico_City"; // Good (GMT-5)
  //$zone = "Etc/GMT+7"; // Good (GMT-7)
  //$zone = "US/Pacific"; // Bad (GMT-7)
  //$zone = "America/Phoenix"; // Bad (GMT-7)
  //$zone = "America/Indianapolis"; // Good (GMT-4)

  //dpm(DateTimeZone::listIdentifiers());

  $string = <<<VEVENTDATA
BEGIN:VEVENT
UID:20100707T210626CEST-0953hniaHU@192.168.28.16
DTSTART;TZID={$zone}:20100714T210000
DTEND;TZID={$zone}:20100714T220000
RRULE;TZID={$zone}:FREQ=WEEKLY;COUNT=10;INTERVAL=1;WKST=SU;BYDA
 Y=SU,TU
END:VEVENT
VEVENTDATA;
  $event = DrupalVEvent::create($string);
  $iterator = $event->getIteratorRange();
  foreach ($iterator as $x) {
    dpm($x->format(DATE_DEBUG_FORMAT));
  }
  */

  /*
  $string = <<<VEVENTDATA
BEGIN:VEVENT
UID:20100715T185135CEST-5521e1WxhM@192.168.28.16
DTSTAMP:20100716T000000Z
DTSTART;TZID=America/Chicago:20100716
DTEND;TZID=America/Chicago:20100716
END:VEVENT
VEVENTDATA;
  $event = DrupalVEvent::create($string);
  $iterator = $event->getIteratorRange();
  foreach ($iterator as $x) {
    dpm($x->format(DATE_DEBUG_FORMAT));
  }
  */

  $string = <<<VEVENTDATA
BEGIN:VEVENT
UID:20100728T233501CEST-0100hfzxZj@192.168.28.16
DTSTAMP;TZID=America/Chicago:20100728T163500Z
DTSTART;TZID=America/Chicago:20100729T100000
DTEND;TZID=America/Chicago:20100729T110000
EXDATE;TZID=America/Chicago:20100730T100000
EXDATE;TZID=America/Chicago:20100731T100000
RRULE;TZID=America/Chicago:FREQ=DAILY;COUNT=10;INTERVAL=1
END:VEVENT
VEVENTDATA;
  $event = DrupalVEvent::create($string);
  $iterator = $event->getIteratorRange();
  dpm('Number of instances: '. count($iterator));
  foreach ($iterator as $x) {
    dpm($x->format(DATE_DEBUG_FORMAT));
  }


  $vcalendar = vcalendar_create();
  $vcalendar->addComponent($event);
  dpm($vcalendar->createCalendar());


  return 'x';
}

/**
 * Factory for vcalendar objects.
 *
 * This is mostly just to provide a chainable wrapper, and to allow us to set
 * Drupal-specific defaults.
 *
 * @return vcalendar
 */
function vcalendar_create() {
  $vcalendar = new vcalendar();
  $vcalendar->setMethod('PUBLISH');

  // Set this to whatever the site timezone is by default.
  //$vcalendar->setProperty('X-WR-TIMEZONE', date_get_timezone('date'));

  $vcalendar->setConfig('unique_id', $_SERVER['HTTP_HOST']);

  return $vcalendar;
}


///// Formatter related hooks and callbacks. /////

/**
 * Implementation of hook_field_formatter_info().
 */
function ical_field_formatter_info() {
  return array(
    'date_ical' => array(
      'label' => t('As iCal'),
      'field types' => array('date'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
  );
}


/**
 * Formatter for iCal fields to display as an iCal record.
 *
 * @ingroup themeable
 */
function theme_ical_formatter_date_ical($element) {
  $path = "ical/date/{$element['#node']->nid}/{$element['#field_name']}";

  if ($image = theme('image', drupal_get_path('module', 'date_api') .'/images/ical16x16.gif', t('Add to calendar'), t('Add to calendar'))) {
    return l($image, $path, array(
      'attributes' => array('class' => 'ical-icon', 'title' => 'ical'),
      'html' => TRUE,
    ));
  }
}

/**
 * Menu callback; Returns the specified node/date field as an iCal record.
 *
 * @param $node
 *   The node we want rendered as an iCal record.
 * @param $field_name
 *   The name of the date field that is the main event date.
 * @param $view_mode
 *   The view mode in which we are operating. We only need this because
 *   the Date module sorta slips in limited formatter configuration, which we
 *   want to leverage.
 */
function ical_date_ical_callback($node, $field_name, $view_mode = 'full') {
  if (!isset($node->$field_name)) {
    watchdog('content', 'Field name not found for iCal callback: %field', array('%field' => $field_name), WATCHDOG_WARNING);
    drupal_not_found();
  }

  $field = $node->$field_name;

  // Date module manages to sneak in some extra settings, so grab those.
  $settings = date_formatter_get_settings($field_name, $node->type, $view_mode);

  $vcal = vcalendar_create();

  // If the ical status field module is installed we need to check for a status
  // to add to the ical.
  $status = FALSE;
  if (module_exists('icalstatus')) {
    $type = content_types($node->type);
    $fields = $type['fields'];

    // Loop through the fields looking for text fields. The ical status module
    // stores it's data as a text field with an icalstatus widget.
    foreach ($fields as $name => $value) {
      if ($value['type'] == 'text' && $value['widget']['type'] == 'icalstatus') {
        // We grab the value of the status from the node.
        // Note: We are assuming there is only one status per node and one value.
        // We may need to change this assumption in the future. An event having
        // just one ical status is the assumption we are running with.
        foreach ($node->$name as $k => $v) {
          $status = $v['value'];
          continue;
        }
        continue;
      }
    }
  }

  foreach ($field as $delta => $instance) {
    $vevent = new DrupalVEvent(new vevent());

    // Although it's possible to configure the field to only show the end date,
    // that's not valid in a vevent so we always show the start date, period.
    $start = new DateTime($instance['value'], new DateTimeZone($instance['timezone']));
    $vevent->setStart($start);

    if (in_array($settings['fromto'], array('to', 'both'))) {
      $start = new DateTime($instance['value'], new DateTimeZone($instance['timezone']));
      $vevent->setStart($start);
    }

    $vevent->setProperty('summary', $node->title);
    $vevent->setProperty('uid', "node-{$node->nid}-{$delta}@{$_SERVER['SERVER_NAME']}");

    if ($status) {
      // We have an ical status to add.
      $vevent->setStatus($status);
    }

    $vcal->addComponent($vevent);
  }

  // Disable devel output, just in case.
  $GLOBALS['devel_shutdown'] = FALSE;

  // This will print output and exit the PHP process.
  $vcal->returnCalendar();
}

