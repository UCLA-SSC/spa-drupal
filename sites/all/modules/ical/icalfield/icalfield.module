<?php
// $Id: icalfield.module,v 1.1 2010/09/21 22:20:34 crell Exp $

/**
 * @file
 * Defines an iCal rule field type.
 */

/**
 * Implementation of hook_theme().
 */
function icalfield_theme() {
  return array(
    'icalfield_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'icalfield_formatter_ical' => array(
      'arguments' => array('element' => NULL),
    ),
    'ical_text' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function icalfield_menu() {
  $items['icalfield/ical/%node/%'] = array(
    'title' => 'iCal formatter',
    'page callback' => 'icalfield_ical_callback',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
  );

  return $items;
}

///// Field related hooks and callbacks. /////

/**
 * Implementation of hook_field_info().
 */
function icalfield_field_info() {
  return array(
    'ical' => array(
      'label' => t('iCal'),
      'description' => t('Store iCal data.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function icalfield_field_settings($op, $field) {
  if ($field['type'] == 'ical') {
    switch ($op) {
      case 'form':

        // In case we later are able to move the settings into a sub array, we
        // need only change this line.
        $settings = $field;

        // Set defaults.
        $settings += array(
          'icalinstance_enabled' => 0,
          'icalinstance_node_type' => '',
          'icalinstance_reference_field' => '',
          'icalinstance_date_field' => '',
          'icalinstance_count' => 10,
        );

        $form['recurrence_settings'] = array(
          '#type' => 'fieldset',
          '#title' => t('Recurrence settings'),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          // These settings only apply if the icalinstance module is enabled.
          '#access' => module_exists('icalinstance'),
        );

        $form['recurrence_settings']['icalinstance_enabled'] = array(
          '#type' => 'checkbox',
          '#title' => t('Enable instance generation'),
          '#default_value' => $settings['icalinstance_enabled'],
        );

        // @todo Restrict this list to just those node types that have a
        // icalreference field on them.
        $form['recurrence_settings']['icalinstance_node_type'] = array(
          '#type' => 'select',
          '#title' => t('Instance node type'),
          '#options' => node_get_types('names'),
          '#default_value' => $settings['icalinstance_node_type'],
          '#description' => t('Select the node type to be used as an instance node.  This node type must contain the icalreference field specified below.'),
        );

        $options = array();
        foreach (icalfield_get_field_instances('icalreference') as $ref_field) {
          $options[$ref_field['field_name']] = $ref_field['field_name'];
        }

        $form['recurrence_settings']['icalinstance_reference_field'] = array(
          '#type' => 'select',
          '#title' => t('Instance reference field'),
          '#options' => $options,
          '#default_value' => $settings['icalinstance_reference_field'],
          '#description' => t('The field to use as a reference field.  This field must be present on the node type specified above.'),
        );

        $options = array();
        foreach (icalfield_get_field_instances('date', FALSE) as $date_field) {
          $options[$date_field['field_name']] = $date_field['field_name'];
        }

        $form['recurrence_settings']['icalinstance_date_field'] = array(
          '#type' => 'select',
          '#title' => t('Instance date field'),
          '#options' => $options,
          '#default_value' => $settings['icalinstance_date_field'],
          '#description' => t('The field on the instance node that will hold the instance date.  This field must be present on the node type specified above.'),
        );

        $options = array();
        foreach (icalfield_get_field_instances('text', FALSE) as $status_field) {
          $field_info = content_fields($status_field['field_name']);
          if ($field_info['widget']['type'] == 'icalstatus') {
            $options[$status_field['field_name']] = $status_field['field_name'];
          }
        }

        $form['recurrence_settings']['icalinstance_status_field'] = array(
          '#type' => 'select',
          '#title' => t('Instance status field'),
          '#options' => $options,
          '#default_value' => $settings['icalinstance_status_field'],
          '#description' => t('The field on the instance node that will hold the instance status.  This field must be present on the node type specified above.'),
          '#access' => (boolean)count($options), // If there are no available status fields, don't even offer the option.
        );

        $form['recurrence_settings']['icalinstance_count'] = array(
          '#type' => 'textfield',
          '#title' => t('Number of instances'),
          '#default_value' => $settings['icalinstance_count'],
          '#description' => t('At most this many instance nodes will be generated at a time, starting from the current date.')
        );

        return $form;

      case 'save':
        // @todo These really should be grouped into a sub-array to match the
        // fieldset for better separation and namespacing, but I have no idea how.
        return array('icalinstance_enabled', 'icalinstance_node_type', 'icalinstance_reference_field', 'icalinstance_date_field', 'icalinstance_count', 'icalinstance_status_field');
        break;

      case 'database columns':
        $columns['name'] = array(
          'type' => 'text',
          'size' => 'small',
          //'not null' => TRUE,
          'views' => TRUE,
        );
        $columns['value'] = array(
          'type' => 'text',
          'size' => 'big',
          //'not null' => TRUE,
          'views' => TRUE,
        );
        $columns['ical_id'] = array(
          'type' => 'text',
          'size' => 'small',
          //'not null' => TRUE,
        );
        return $columns;

      // @todo Do we want to do anything with this?
      case 'views data':
    }
  }
}

/**
 * Implementation of hook_field().
 */
function icalfield_field($op, &$node, $field, &$items, $teaser, $page) {
  if ($field['type'] == 'ical') {
    switch ($op) {
      case 'validate':
      case 'sanitize':
        break;

      case 'insert':
      case 'update':
        foreach ($items as $key => $value) {
          // If there is no name or value we have an empty field and should not add an uuid to it.
          if (!empty($items[$key]['name']) && !empty($items[$key]['value']) && empty($items[$key]['ical_id'])) {
            $items[$key]['ical_id'] = uuid_uuid();
          }
        }
        break;
    }
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function icalfield_content_is_empty($item, $field) {
  if ($field['type'] == 'ical') {
    if (empty($item['value'])) {
      return TRUE;
    }
    return FALSE;
  }
}

/**
 * Filter any empty values from the values for icalfield.
 *
 * @param array $icalfield
 *   The value array for an icalfield. For example $node->icalfield_name where icalfield_name is
 *   name of the field.
 *
 * @return array
 *   A value array filtered of any empty values.
 */
function icalfield_filter_empty(array $icalfield = array()) {
  foreach ($icalfield as $k => $v) {
    if (empty($v['value'])) {
      unset($icalfield[$k]);
    }
  }
  return $icalfield;
}

///// Formatter related hooks and callbacks. /////

/**
 * Implementation of hook_field_formatter_info().
 */
function icalfield_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('ical'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'ical' => array(
      'label' => t('As iCal link'),
      'field types' => array('ical'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
  );
}


/**
 * Formatter for iCal fields to display as an iCal record.
 *
 * @ingroup themeable
 */
function theme_icalfield_formatter_ical($element) {
  $path = "icalfield/ical/{$element['#node']->nid}/{$element['#field_name']}";

  if ($image = theme('image', drupal_get_path('module', 'date_api') .'/images/ical16x16.gif', t('Add to calendar'), t('Add to calendar'))) {
    return l($image, $path, array(
      'attributes' => array('class' => 'ical-icon', 'title' => 'ical'),
      'html' => TRUE,
    ));
  }
}


/**
 * Simple formatter for iCal fields.
 *
 * @ingroup themeable
 */
function theme_icalfield_formatter_default($element) {

  // On preview screens some untransformed form elements that represent the
  // information we convert into ical elements trickle through. Here we filter
  // them out before displaying anything.
  if (is_array($element['#item']) && isset($element['#item']['value'])) {
    return t('@name: @value (@ical_id)', array(
      '@name' => $element['#item']['name'],
      '@value' => $element['#item']['value'],
      '@ical_id' => $element['#item']['ical_id'],
    ));
  }
  else {
    return ;
  }
}


/**
 * Menu callback; Returns the specified node/field as an iCal record.
 *
 * Note: This callback assumes that all records are vevent, not any other part
 * of the iCal spec.  That may be changed in version 2.
 *
 * @todo Add support for non-vevent records.
 * @param $node
 *   The node we want rendered as an iCal record.
 * @param $field_name
 *   The name of the field on the node that holds the relevant iCal rules.
 */
function icalfield_ical_callback($node, $field_name) {
  if (!isset($node->$field_name)) {
    watchdog('content', 'Field name not found for iCal callback: %field', array('%field' => $field_name), WATCHDOG_WARNING);
    return drupal_not_found();
  }

  $field = icalfield_filter_empty($node->$field_name);
  if (empty($field)) {
    watchdog('content', 'Field empty for iCal callback: %field on %node_title', array('%field' => $field_name, '%node_title' => $node->title), WATCHDOG_WARNING);
    return drupal_not_found();
  }

  // @todo Error check that the field is an iCal field, too.

  $vcal = vcalendar_create();

  foreach ($field as $rule) {
    $vevent = DrupalVEvent::create($rule['value']);

    // Set these properties after we parse the record so that they take precedence
    // over anything in the record itself.
    $vevent->setProperty('summary', $node->title);
    $vevent->setProperty('uid', "{$rule['ical_id']}@{$_SERVER['SERVER_NAME']}");

    $vcal->setComponent($vevent);
  }

  // Disable devel output, just in case.
  $GLOBALS['devel_shutdown'] = FALSE;

  // This will print output and exit the PHP process.
  $vcal->returnCalendar();
}

///// Widget related hooks and callbacks. /////

/**
* Implementation of hook_widget_info().
*/
function icalfield_widget_info() {
  return array(
    'ical_text' => array(
      'label' => 'Text fields (manual)',
      'field types' => array('ical'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function icalfield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  switch ($field['widget']['type']) {
    case 'ical_text':
      $element = array(
        '#type' => 'ical_text',
        // Because this is a single-value widget.
        '#default_value' => $items[$delta],
      );
      break;
  }

  return $element;
}

/**
 * Implementation of FAPI hook_elements().
 */
function icalfield_elements() {
  return array(
    'ical_text' => array(
      '#input' => TRUE,
      '#columns' => array(
        'name',
        'value',
        'ical_id',
      ),
      '#process' => array('ical_text_process'),
    ),
  );
}

/**
 * Process callback for the ical_text widget element type.
 */
function ical_text_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $delta = $element['#delta'];
  $required = ($delta == 0 && $field['required'] == TRUE);
  // fapi metadata that is common to and must (?) be appended to all fields
  $common = array(
    '#delta' => $delta,
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#columns' => $element['#columns'],
  );

  $element['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => isset($element['#value']['name']) ? $element['#value']['name'] : NULL,
  ) + $common;
  $element['value'] = array(
    '#type' => 'textarea',
    '#title' => t('VEvent'),
    '#default_value' => isset($element['#value']['value']) ? $element['#value']['value'] : NULL,
    '#description' => t('Enter a valid VEVENT record, including the begin and end statements.'),
  ) + $common;
  /*
  $element['ical_id'] = array(
    '#type' => 'textfield',
    '#title' => t('iCal ID'),
    '#default_value' => isset($element['#value']['ical_id']) ? $element['#value']['ical_id'] : NULL,
  ) + $common;
  */
  $element['ical_id'] = array(
    '#type' => 'hidden',
    '#title' => t('iCal ID'),
    '#value' => isset($element['#value']['ical_id']) ? $element['#value']['ical_id'] : NULL,
  ) + $common;

  /*$element['property_id'] = array(
    '#type' => 'value',
    '#value' => isset($element['#value'][$delta]['property_id']) ? $element['#value'][$delta]['property_id'] : NULL,
  ) + $common;
  */
  return $element;
}

/**
 * Theme function for the ical_text widget element.
 *
 * @ingroup themeable
 */
function theme_ical_text($element) {
  $output = $element['#children'];
  $output = theme('form_element', $element, $element['#children']);
  return $output;
}

/**
 * Gets a list of all field instances of the specified field type.
 *
 * @param string $type
 *   The type of the field we want to query.
 * @param boolean $allow_multiple
 *   Whether or not to include multi-value fields.
 * @return array
 *   An array of field information arrays.
 */
function icalfield_get_field_instances($type, $allow_multiple = TRUE) {

  static $use = array();

  if (empty($use[$type])) {
    $use[$type] = array();

    // We can't just ask CCK for this data because this function may be called
    // from within hook_field_formatter(), at which point CCK's data cache is
    // all b0rked.
    if ($allow_multiple) {
      $result = db_query("SELECT field_name, type, multiple FROM content_node_field WHERE type = '%s'", $type);
    }
    else {
      $result = db_query("SELECT field_name, type, multiple FROM content_node_field WHERE multiple = 0 AND type = '%s'", $type);
    }

    while ($record = db_fetch_array($result)) {
      $use[$type][$record['field_name']] = $record;
    }
  }

  return $use[$type];
}
