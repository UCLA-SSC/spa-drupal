<?php

/**
 * Implementation of hook_autoload_info().
 */
function icalinstance_autoload_info() {

  $info['ICalInstanceProcessor'] = array(
    'file' => 'icalinstance.processor.inc',
  );

  return $info;
}

/**
 * Implementaiton of hook_cron_queue_info().
 */
function icalinstance_cron_queue_info() {
  $queues = array();
  $queues['icalinstance_events'] = array(
    'worker callback' => 'icalinstance_events_process_event',
    'time' => 10,
  );

  return $queues;
}


/**
 * Saves an event node for later instance generation.
 *
 * @param int $nid
 *   The nid of the node that needs to be processed.
 * @param int $last_updated
 *   The timestamp when this event was last processed.
 */
function icalinstance_save($nid, $last_updated = 0) {

  $exists = db_result(db_query("SELECT nid from {icalinstance_events} WHERE nid = %d", $nid));

  if ($exists) {
    db_query("UPDATE {icalinstance_events} SET last_updated = %d WHERE nid = %d", $last_updated, $nid);
  }
  else {
    db_query("INSERT {icalinstance_events} (nid, last_updated) VALUES (%d, %d)", $nid, $last_udpated);
  }
}

/**
 * Retrieves all event nids that have not been processed since the specified timestamp.
 *
 * @param int $threshold
 *   Unix timestamp.  We will retrieve all events that have not been touched
 *   since before this timestamp.
 */
function icalinstance_get($threshold) {
  $nids = array();

  $result = db_query("SELECT nid FROM {icalinstance_events} WHERE last_updated < %d ORDER BY last_updated", $threshold);
  while ($record = db_fetch_object($result)) {
    $nids[] = $record->nid;
  }

  return $nids;
}

/**
 * Removes a node from the set so that we don't bother processing it again.
 *
 * @param int $nid
 *   The nid to remove from circulation.
 */
function icalinstance_delete($nid) {
  return db_query("DELETE FROM {icalinstance_events} WHERE nid = %d", $nid);
}

/**
 * Gets all instance nodes that were spawned by the specified node.
 *
 * This function will return nids for all instance nodes relating to the specified
 * node, through any icalreference field.
 *
 * @param int $event
 *   The event node for which we want the instances.
 * @param boolean $future
 *   If TRUE, restrict the search to just those instance nodes in the future.
 */
function icalinstance_get_instance_nids($event, $future = TRUE) {

  $nids = array();
  $ical_field = NULL;

  $settings = icalinstance_get_settings($event->type);
  $reference_field_info = content_fields($settings['icalinstance_reference_field']);
  $reference_field_db = content_database_info($reference_field_info);

  // Because we want all nodes that reference back to this one by any rule,
  // we can vastly simplify the query.
  if ($future) {
    $date_field_info = content_fields($settings['icalinstance_date_field']);
    $date_field_db = content_database_info($date_field_info);
    $now = new DateTime(NULL, new DateTimeZone($date_field_info['timezone_db']));

    $result = db_query("SELECT rf.nid
      FROM {{$reference_field_db['table']}} rf
        INNER JOIN {{$date_field_db['table']}} df ON (rf.nid = df.nid AND rf.vid = df.vid)
      WHERE rf.{$reference_field_db['columns']['nid']['column']} = %d
        AND df.{$date_field_db['columns']['value']['column']} > '%s'
        ", $event->nid, $now->format(DATE_DATETIME_FORMAT));
  }
  else {
    $result = db_query("SELECT rf.nid
      FROM {{$reference_field_db['table']}} rf
      WHERE rf.{$reference_field_db['columns']['nid']['column']} = %d
        ", $event->nid);
  }

  while ($record = db_fetch_object($result)) {
    $nids[] = $record->nid;
  }

  return $nids;
}

/**
 * Implementation of hook_nodeapi().
 */
function icalinstance_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    // If a node is deleted, we don't want to keep processing it even if it's
    // not done. Note that this will still run a deletion for non-event nodes
    // but that's OK, since this is cheap, a non-critical path and it's too much
    // work to figure out if it's one of the node types we care about.
    case 'delete':
      icalinstance_delete($node->nid);
      break;
  }
}



/**
 * Implementation of hook_cron().
 */
function icalinstance_cron() {

  $threshold = time() - variable_get('icalinstance_processing_delay', 86400);
  $queue = drupal_queue_get('icalinstance_events');

  // Any event that we haven't processed for a while throw into the queue
  // so that it gets processed.
  foreach (icalinstance_get($threshold) as $nid) {
    $queue->createItem(array('nid' => $nid));
    // Mark that it's been queued for processing so that we don't do so again
    // for a while, presumably until after it's been processed.
    icalinstance_save($nid, time());
  }
}

/**
 * Processess an event in the icalinstance_events queue.
 *
 * @param $item
 *   The Drupal Queue info array.
 */
function icalinstance_events_process_event($info) {

  $node = node_load($info['nid']);

  // Confirm that the node in question hasn't been deleted.  If it has been,
  // just skip it and pull it out of the processing list.
  if ($node) {
    // Process the event data to generate instance nodes.
    $processor = new ICalInstanceProcessor($node);

    // If we have rules associated with instance node save, this keeps them
    // from firing twice. Unfortuantely this is probably client-specific.
    // @todo Rip this out in favor of something more flexible. Sigh.
    $processor->setInstanceEvent('update', FALSE);
    $needs_additional = $processor->execute();

    // If we don't need to process this event again, remove it from the list so
    // that it doesn't get requeued.
    if (!$needs_additional) {
      icalinstance_delete($info['nid']);
    }
  }
  else {
    icalinstance_delete($info['nid']);
  }
}

/**
 * Retrieves the configuration of the ical field on the specified node type.
 *
 * This does assume there is only one ical field on that node type. I don't know
 * why you'd want more than once.
 *
 * @param $node_type
 *   The node type to search.
 * @return array
 *   The settings for the specified node type's ical field, or FALSE if there
 *   isn't one.
 */
function icalinstance_get_settings($node_type) {

  static $info = array();

  if (empty($info[$node_type])) {
    $settings = db_result(db_query("SELECT cnf.global_settings
          FROM {content_node_field} cnf
            INNER JOIN {content_node_field_instance} cnfi ON cnfi.field_name = cnf.field_name
          WHERE type = '%s'
            AND cnfi.type_name = '%s'", 'ical', $node_type));
    if ($settings) {
      $info[$node_type] = unserialize($settings);
    }
    else {
      $info[$node_type] = FALSE;
    }
  }

  return $info[$node_type];
}

