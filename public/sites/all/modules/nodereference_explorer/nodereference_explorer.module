<?php
// $Id: nodereference_explorer.module,v 1.6 2009/07/28 15:14:18 gnindl Exp $

/**
 * @file
 * nodereference_explorer.module
 * Root module class holding basic information about
 * theme templates, menu callbacks, views integration, as
 * well as custom includes, css and js functions
 */

//Global variables, name and path of the module
define('NODE_REFERENCE_EXPLORER_MODULE_NAME', 'nodereference_explorer');
define('NODE_REFERENCE_EXPLORER_MODULE_PATH', drupal_get_path('module', NODE_REFERENCE_EXPLORER_MODULE_NAME));
define('NODE_REFERENCE_EXPLORER_DEFAULT_VIEW_NAME', NODE_REFERENCE_EXPLORER_MODULE_NAME . '_default');

define('NODE_REFERENCE_EXPLORER_MENU_CALLBACK_DIALOG', 'nodereference_explorer/dialog');
define('NODE_REFERENCE_EXPLORER_MENU_CALLBACK_MODALFRAME', 'nodereference_explorer/modalframe');
define('NODE_REFERENCE_EXPLORER_MENU_CALLBACK_PREVIEW', 'nodereference_explorer/preview');
define('NODE_REFERENCE_EXPLORER_MENU_CALLBACK_PREVIEW_DISPLAYS', 'nodereference_explorer/preview_displays');

/**
 * Definition of entry points to the module
 * The item urls (keys) are delegated to the page call backs
 * functions
 * @return array of menu items
 */
function nodereference_explorer_menu() {

  $items = array();

  // module menu item is also root of the tabbed views in the dialog.
  $items[NODE_REFERENCE_EXPLORER_MODULE_NAME] = array(
    'access arguments' => FALSE,
  );

  // views is responsible for the access control of these callbacks. the field
  // potentially has its own permissions.
  $items[NODE_REFERENCE_EXPLORER_MENU_CALLBACK_DIALOG] = array(
    'page callback' => 'nodereference_explorer_dialog',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  //css and js files preparing modalframe
  $items[NODE_REFERENCE_EXPLORER_MENU_CALLBACK_MODALFRAME] = array(
    'page callback' => 'nodereference_explorer_modalframe',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  //retrieving node detail view via JSON
  $items[NODE_REFERENCE_EXPLORER_MENU_CALLBACK_PREVIEW] = array(
    'page callback' => 'nodereference_explorer_preview',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  //get all displays as options for choice as preview display in the widget settings
  $items[NODE_REFERENCE_EXPLORER_MENU_CALLBACK_PREVIEW_DISPLAYS] = array(
    'page callback' => 'nodereference_explorer_preview_displays',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function nodereference_explorer_elements() {

  $elements = array();

  $elements['nodereference_explorer'] = array(
    '#input' => TRUE,
    '#columns' => array('name', 'actions', 'preview', 'value'),
    '#delta' => 0,
    '#process' => array('nodereference_explorer_widget_process'), //one processing function calling a parent process function
    '#autocomplete_path' => FALSE,
  );
  return $elements;
}

/**
 * Definition of module and field related themes.
 * @return array of themes and called theming function
 */
function nodereference_explorer_theme() {

  $path = NODE_REFERENCE_EXPLORER_MODULE_PATH .'/theme';

  $themes = array();

  $themes['nodereference_explorer'] = array( // theme for form element including autocomplete and preview
    'arguments' => array('element' => NULL),
    'function' => 'theme_nodereference_explorer',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $themes['nodereference_explorer_button'] = array( // theme for form element including autocomplete and preview
    'arguments' => array('element' => NULL),
    'function' => 'theme_nodereference_explorer_button',
    'path' => $path,
    'file' => 'theme.inc',
  );

  $themes['nodereference_explorer_dialog'] = array( //dialog template
    'template' => 'nodereference-explorer-dialog',
    'arguments' => array(
      'tabs' => array(),
      'filters' => array(),
      'displays' => array(),
    ),
    'path' => $path,
    'file' => 'theme.inc',
  );

  return $themes;
}

/**
 * Implementation of hook_views_api().
 * Referenced php includes for views handling
 * @return Array with Views API version.
 */
function nodereference_explorer_views_api() {
  return array(
    'api' => 2.0,
    'path' => NODE_REFERENCE_EXPLORER_MODULE_PATH . '/includes',
  );
}

/**
 * Implementation of hook_init().
 *
 * Some start up/boot work is done here when the module is
 * loaded. The function is called in any context (front or back end).
 * Actually some global include files are loaded which logically
 * seperated for better maintanance and overview.
 */
function nodereference_explorer_init() {
  nodereference_explorer_include_all(); //include all header files
  nodereference_explorer_plugins(); //include all plugins
  views_include('view'); //include the view object
}

/**
 * Initiate all plugins sources, i. e. include and js files. A list
 * of available plugins is returned.
 * @return
 *   array of plugins, e. g. array('nodereference', 'link');
 */
function nodereference_explorer_plugins() {

  $path = NODE_REFERENCE_EXPLORER_MODULE_PATH . '/plugins'; //plugins subdirectory

  $prefix = 'nodereference_explorer_plugin_cck_';

  $includes = file_scan_directory($path, '\.inc$'); //scan for include files
  $js = file_scan_directory($path, '\.js$'); //scan for javascript sources

  static $plugins; //load plugin sources only once
  if (!isset($plugins) || empty($plugins)) {
    $plugins = array();
    //only cck plugin supported yet, load super class manually
    module_load_include('inc', NODE_REFERENCE_EXPLORER_MODULE_NAME, 'plugins/cck/nodereference_explorer_plugin_cck');
    foreach ($includes as $include) { //load all inc files
      $file_name = $include->name;
      $start = strrpos($file_name, $prefix) + strlen($prefix); //naming convention
      $plugin_name = substr($file_name, $start);
      if ($start && !empty($plugin_name)) { //add files if naming is correct
        include $include->filename;
        $plugins[] = $plugin_name;
      }
    }
    foreach ($js as $file) { //load all js files
      $file_name = $file->name;
      $start = strrpos($file_name, $prefix) + strlen($prefix); //naming convention
      $plugin_name = substr($file_name, $start);
      if ($start && !empty($plugin_name)) //add files if naming is correct
        drupal_add_js($file->filename);
    }
  }
  return $plugins;
}

/**
 * Load a plugin class by field type
 * @param $type
 *   CCK field type
 * @return
 *   Plugin class
 */
function nodereference_explorer_plugins_load_plugin($type) {
  if (isset($type) && !empty($type)) {
    static $loaded_plugins;
    if (!isset($loaded_plugins[$type])) {
      $class = new ReflectionClass('nodereference_explorer_plugin_cck_' . $type);
      $loaded_plugins[$type] = $class->newInstance();
    }
    return $loaded_plugins[$type];
  }
  return NULL;
}

/**
 * Add all include files in the "includes" subdirectory
 */
function nodereference_explorer_include_all() {
  $path = NODE_REFERENCE_EXPLORER_MODULE_PATH . '/includes';
  $includes = file_scan_directory($path, '\.inc$');
  foreach ($includes as $include)
    nodereference_explorer_add_inc('includes/' . $include->name);
}

/**
 * Add PHP include files
 * @param $files
 */
function nodereference_explorer_add_inc($files = array()) {
  //Convert file to an array if it's not one already, to compensate for lazy developers. ;)
  if (!is_array($files))
    $files = array($files);

  foreach ($files as $file)
    module_load_include('inc', NODE_REFERENCE_EXPLORER_MODULE_NAME, $file);
}

/**
 * Add CSS style sheets
 * @param array $files
 */
function nodereference_explorer_add_css($files = array()) {
  // Convert file to an array if it's not one already, to compensate for
  // lazy developers. ;)
  if (!is_array($files))
    $files = array($files);

  $css_path = NODE_REFERENCE_EXPLORER_MODULE_PATH .'/css'; //from css subpath

  foreach ($files as $file)
    drupal_add_css($css_path . '/' . "$file.css");
}

/**
 * Add JS javascripts sources
 * Plugins are loaded from the plugins subdirectory
 * @param array $files
 * @param boolean $plugin
 */
function nodereference_explorer_add_js($files = array(), $plugin = FALSE) {
  static $loaded_files, $js_core; //avoid duplicate loading of js files, i. e. cache them in this array
  //Convert file to an array if it's not one already, to compensate for lazy developers. ;)
  if (!is_array($files))
    $files = array($files);

  // If base js script hasn't been added yet, add it.
  if (!isset($js_core)) {
    $js_core = TRUE;
    nodereference_explorer_add_js('explorer');
  }

  //set basis js path
  $js_path = NODE_REFERENCE_EXPLORER_MODULE_PATH .'/js'; //from js subpath

  if (!$plugin) { //add common js file
    foreach ($files as $file)
      drupal_add_js($js_path .'/' . "$file.js");
  }
  else { //add plugin js file
    //plugin js subpath
    $js_path .= '/plugins';

    //get the compression type, i. e. none, mini or packed
    $compression = variable_get('jquery_update_compression_type', 'mini');

    //depending on the compression type load the appropriate js file
    foreach ($files as $file) {
      if (!isset($loaded_files[$file])) {
        switch ($compression) {
          case 'none':
            $file_path = "$file.js";
            break;
          case 'pack':
            $file_path = "packed/$file.packed.js";
            break;
          case 'mini':
          default:
            $file_path = "minified/$file.min.js";
            break;
        }
      $js_plugin = $js_path . '/' . $file_path;
      drupal_add_js($js_plugin);
      $loaded_files[$file] = $js_plugin;
      }
    }
  }
}